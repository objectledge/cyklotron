<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Related projects</title>
  </properties>
  
  <body>
    <section name="Related projects">
      <subsection name="ObjectLedge">
        <p>
          <a href="http://objectledge.org">ObjectLedge</a>
        </p>
        <p>
          Object Ledge is a platform for building applications in Java 2 Standard and Enterprise 
          Edition environments. 
        </p>
        <p>
          ObjectLedge follows component / container and Inversion Of Control design paradigms 
          implemented with the excelent <a href="http://picocontainer.org">PicoContainer</a> package.
        </p>
        <p>
          ObjectLedge provides a number of components - basic building blocks of the applications,
          a few extensions to the Pico framework, customized containers for easy deployment of
          applications in command line, daemon, and J2EE servlet environments.
        </p>
      </subsection>
      <subsection name="Coral">
        <p><a href="http://coral.objectledge.org">Coral</a></p>
        <p>Coral is as an object oriented database. It manages structured resources, that 
        can be mapped to Java objects in a JDBC relational database. </p>
        <p>Besides simple object persistency mechanism Coral provides an expressive security system, 
        many kinds of resources relations (intrinsic tree organization or resources, 
        reference attributes, set theory relations) and a powerful query facility that 
        can use attribute values and resource relations to select objects from the 
        store.</p>
        <p>The resources can be manipulated through Java API, or interactively using
        RML script language. Resource types can be created and modified at runtime 
        (existing resource instances are aproprietly adjusted). Java wrapper sources for
        the resources can be genereated using a Maven plugin from RML scripts, or a live
        database instance. Datatype schemata and security information can be exported
        to RML scripts, and resources can be imported/exported using XML.</p>
      </subsection>
    </section>
      <subsection name="Cyklotron 2">
        <p>
          <a href="http://cykotron2.cyklotron.org">Cyklotron 2</a>
        </p>
    		<p>Cyklotron 2 is the successor of Cyklotron content management system.</p>
		<p>Cyklotron 2 is a cleanroom reimplementation, that focuses on simplicity of the internal
		mechanisms, and extensibility of the system by adding custom applications.</p>
		<p>The focal point of Cyklotron2 is the Dashboard - the common administrative interface
		for all embedded applications, that integrates tree view of all resources in the system
		accessible to the user, dynamic properties pane and context sensitive operations menu.
		All these elements are metadata driven, and new applications can easily integrate into
		this framework through a number of well defined extension points.</p>
		<p>Cyklotron 2 offers a pervasive security system. Applications define roles and permissions
		specific to their problem domain, and their assignment to particular resources, groups, and
		individuals is managed in a consistent way across the whole system.</p>
		<p>Public (as opposed to administrative) interface of Cyklotron 2 is similar to that developed
		in Cyklotron. It is based on layout styles, layout templates, component slots (sockets)
		and components. Custom applications can extend the interface by providing custom components
		that are subject to configuration, visual customization and internationalization through
		shared, consistent mechanisms.</p>
		<p>At this point only a fraction of Cyklotron functionality was ported. The current objective
		of the project is to produce a set of applications sufficient to use Cyklotron 2 as a 
		group collaboration system similar to <a href="http://groups.engo.pl">eNGO groups</a>.</p>
      </subsection>
  </body>
</document>
